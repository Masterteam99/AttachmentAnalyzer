import React, { useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { 
  Play, 
  CheckCircle, 
  Clock, 
  Target, 
  TrendingUp, 
  Calendar,
  SkipForward,
  Video,
  Info,
  Plus,
  RefreshCw
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useLocation } from "wouter";

interface DailyExercise {
  id: string;
  exerciseId: number;
  name: string;
  description: string;
  type: string;
  sets?: number;
  reps?: number;
  duration?: number;
  targetMuscles: string[];
  order: number;
  status: 'pending' | 'active' | 'completed' | 'skipped';
  completedAt?: string;
  analysisResult?: any;
  formScore?: number;
  videoUrl?: string;
  instructions: string[];
  tips: string[];
}

interface DailyWorkout {
  id: string;
  userId: string;
  date: string;
  planId: number;
  exercises: DailyExercise[];
  totalExercises: number;
  completedExercises: number;
  estimatedDuration: number;
  actualDuration?: number;
  status: 'pending' | 'in_progress' | 'completed' | 'skipped';
  completedAt?: string;
  createdAt: string;
}

interface WorkoutProgress {
  currentExerciseIndex: number;
  totalExercises: number;
  progressPercentage: number;
  timeElapsed: number;
  estimatedTimeRemaining: number;
}

interface DailyWorkoutDashboardProps {
  // Props rimossi poiché sarà utilizzato nella pagina dedicata
}

export function DailyWorkoutDashboard({}: DailyWorkoutDashboardProps) {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [, setLocation] = useLocation();
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);

  // Fetch daily workout
  const { data: workout, isLoading, error } = useQuery({
    queryKey: ['daily-workout', selectedDate],
    queryFn: async () => {
      const response = await fetch(`/api/daily-workout/today`, {
        credentials: 'include'
      });
      if (!response.ok) throw new Error('Failed to fetch daily workout');
      return response.json() as Promise<DailyWorkout>;
    }
  });

  // Fetch workout stats
  const { data: stats } = useQuery({
    queryKey: ['workout-stats'],
    queryFn: async () => {
      const response = await fetch('/api/workout-stats?days=7', {
        credentials: 'include'
      });
      if (!response.ok) throw new Error('Failed to fetch workout stats');
      return response.json();
    }
  });

  // Start exercise mutation
  const startExerciseMutation = useMutation({
    mutationFn: async (exerciseId: string) => {
      const response = await fetch('/api/daily-workout/start-exercise', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({ exerciseId, date: selectedDate })
      });
      if (!response.ok) throw new Error('Failed to start exercise');
      return response.json();
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['daily-workout'] });
      toast({
        title: "Esercizio Avviato",
        description: `${data.exercise?.name} è iniziato!`
      });
      // Naviga alla pagina daily workout
      setLocation('/daily-workout');
    },
    onError: (error) => {
      toast({
        title: "Errore",
        description: "Impossibile avviare l'esercizio",
        variant: "destructive"
      });
    }
  });

  // Skip exercise mutation
  const skipExerciseMutation = useMutation({
    mutationFn: async (exerciseId: string) => {
      const response = await fetch('/api/daily-workout/skip-exercise', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({ exerciseId, reason: 'User skipped' })
      });
      if (!response.ok) throw new Error('Failed to skip exercise');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['daily-workout'] });
      toast({
        title: "Esercizio Saltato",
        description: "Esercizio saltato con successo"
      });
    }
  // Generate workout mutation
  const generateWorkoutMutation = useMutation({
    mutationFn: async () => {
      const response = await fetch('/api/daily-workout/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({ date: selectedDate })
      });
      if (!response.ok) throw new Error('Failed to generate workout');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['daily-workout'] });
      toast({
        title: "Workout Generato!",
        description: "Il tuo allenamento giornaliero è pronto"
      });
    },
    onError: (error) => {
      toast({
        title: "Errore",
        description: "Impossibile generare l'allenamento",
        variant: "destructive"
      });
    }
  });
    switch (status) {
      case 'completed':
        return <Badge variant="default" className="bg-green-500">Completato</Badge>;
      case 'active':
        return <Badge variant="default" className="bg-blue-500">In Corso</Badge>;
      case 'skipped':
        return <Badge variant="secondary">Saltato</Badge>;
      default:
        return <Badge variant="outline">In Attesa</Badge>;
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="h-5 w-5 text-green-500" />;
      case 'active':
        return <Play className="h-5 w-5 text-blue-500" />;
      case 'skipped':
        return <SkipForward className="h-5 w-5 text-gray-400" />;
      default:
        return <Clock className="h-5 w-5 text-gray-400" />;
    }
  };

  const formatDuration = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {[1, 2, 3].map(i => (
            <Card key={i} className="animate-pulse">
              <CardContent className="p-6">
                <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                <div className="h-8 bg-gray-200 rounded w-1/2"></div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  if (error || !workout) {
    return (
      <Card>
        <CardContent className="p-6 text-center space-y-4">
          <div className="space-y-2">
            <Calendar className="h-12 w-12 text-muted-foreground mx-auto" />
            <h3 className="text-lg font-semibold">Nessun workout per oggi</h3>
            <p className="text-muted-foreground">
              Non hai ancora un allenamento programmato per oggi.
            </p>
          </div>
          <Button 
            onClick={() => generateWorkoutMutation.mutate()}
            disabled={generateWorkoutMutation.isPending}
          >
            <Plus className="h-4 w-4 mr-2" />
            {generateWorkoutMutation.isPending ? "Generando..." : "Genera Workout"}
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <Calendar className="h-4 w-4 text-blue-500" />
              <div>
                <p className="text-sm font-medium">Data</p>
                <p className="text-2xl font-bold">
                  {new Date(workout.date).toLocaleDateString('it-IT', { 
                    day: 'numeric', 
                    month: 'short' 
                  })}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <Target className="h-4 w-4 text-green-500" />
              <div>
                <p className="text-sm font-medium">Progresso</p>
                <p className="text-2xl font-bold">
                  {workout.completedExercises}/{workout.totalExercises}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <Clock className="h-4 w-4 text-orange-500" />
              <div>
                <p className="text-sm font-medium">Durata Stimata</p>
                <p className="text-2xl font-bold">{workout.estimatedDuration}min</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <TrendingUp className="h-4 w-4 text-purple-500" />
              <div>
                <p className="text-sm font-medium">Score Medio</p>
                <p className="text-2xl font-bold">
                  {stats?.averageScore || '--'}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Workout Progress */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>Workout di Oggi</span>
            {getStatusBadge(workout.status)}
          </CardTitle>
          <CardDescription>
            Piano: {workout.planId} • {workout.totalExercises} esercizi
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div>
              <div className="flex justify-between text-sm mb-2">
                <span>Completamento</span>
                <span>{Math.round((workout.completedExercises / workout.totalExercises) * 100)}%</span>
              </div>
              <Progress 
                value={(workout.completedExercises / workout.totalExercises) * 100} 
                className="h-2"
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Exercises List */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold">Esercizi</h3>
        
        {workout.exercises.map((exercise, index) => (
          <Card key={exercise.id} className={`${exercise.status === 'active' ? 'ring-2 ring-blue-500' : ''}`}>
            <CardContent className="p-4">
              <div className="flex items-start justify-between">
                <div className="flex items-start space-x-3">
                  {getStatusIcon(exercise.status)}
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-1">
                      <h4 className="font-semibold">{exercise.name}</h4>
                      {getStatusBadge(exercise.status)}
                      {exercise.formScore && (
                        <Badge variant="outline">
                          Score: {exercise.formScore}
                        </Badge>
                      )}
                    </div>
                    
                    <p className="text-sm text-muted-foreground mb-2">
                      {exercise.description}
                    </p>

                    <div className="flex flex-wrap gap-2 text-xs text-muted-foreground">
                      <span className="flex items-center">
                        <Clock className="h-3 w-3 mr-1" />
                        {exercise.duration ? formatDuration(exercise.duration) : 'Durata variabile'}
                      </span>
                      {exercise.sets && (
                        <span>{exercise.sets} serie</span>
                      )}
                      {exercise.reps && (
                        <span>{exercise.reps} ripetizioni</span>
                      )}
                    </div>

                    {exercise.targetMuscles.length > 0 && (
                      <div className="flex flex-wrap gap-1 mt-2">
                        {exercise.targetMuscles.map(muscle => (
                          <Badge key={muscle} variant="secondary" className="text-xs">
                            {muscle}
                          </Badge>
                        ))}
                      </div>
                    )}

                    {exercise.status === 'completed' && exercise.completedAt && (
                      <p className="text-xs text-green-600 mt-2">
                        Completato: {new Date(exercise.completedAt).toLocaleTimeString('it-IT')}
                      </p>
                    )}
                  </div>
                </div>

                <div className="flex flex-col space-y-2 ml-4">
                  {exercise.status === 'pending' && (
                    <>
                      <Button
                        onClick={() => startExerciseMutation.mutate(exercise.id)}
                        disabled={startExerciseMutation.isPending}
                        size="sm"
                      >
                        <Play className="h-4 w-4 mr-1" />
                        Inizia
                      </Button>
                      
                      <Button
                        onClick={() => skipExerciseMutation.mutate(exercise.id)}
                        disabled={skipExerciseMutation.isPending}
                        variant="outline"
                        size="sm"
                      >
                        <SkipForward className="h-4 w-4 mr-1" />
                        Salta
                      </Button>
                    </>
                  )}

                  {exercise.videoUrl && (
                    <Button variant="ghost" size="sm">
                      <Video className="h-4 w-4 mr-1" />
                      Video PT
                    </Button>
                  )}

                  {exercise.instructions.length > 0 && (
                    <Button variant="ghost" size="sm">
                      <Info className="h-4 w-4 mr-1" />
                      Info
                    </Button>
                  )}
                </div>
              </div>

              {/* Exercise Instructions (collapsible) */}
              {exercise.instructions.length > 0 && exercise.status === 'active' && (
                <div className="mt-4 p-3 bg-blue-50 rounded-lg">
                  <h5 className="font-medium text-sm mb-2">Istruzioni:</h5>
                  <ul className="text-sm space-y-1">
                    {exercise.instructions.map((instruction, idx) => (
                      <li key={idx} className="flex items-start">
                        <span className="text-blue-500 mr-2">•</span>
                        {instruction}
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {/* Exercise Tips */}
              {exercise.tips.length > 0 && exercise.status === 'active' && (
                <div className="mt-2 p-3 bg-green-50 rounded-lg">
                  <h5 className="font-medium text-sm mb-2">Suggerimenti:</h5>
                  <ul className="text-sm space-y-1">
                    {exercise.tips.map((tip, idx) => (
                      <li key={idx} className="flex items-start">
                        <span className="text-green-500 mr-2">💡</span>
                        {tip}
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Workout Completion */}
      {workout.status === 'completed' && (
        <Card className="bg-green-50 border-green-200">
          <CardContent className="p-6 text-center">
            <CheckCircle className="h-12 w-12 text-green-500 mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-green-800 mb-2">
              Workout Completato! 🎉
            </h3>
            <p className="text-green-600">
              Hai completato tutti gli esercizi in {workout.actualDuration} minuti
            </p>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
